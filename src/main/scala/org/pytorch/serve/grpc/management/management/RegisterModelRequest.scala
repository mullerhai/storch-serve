// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package org.pytorch.serve.grpc.management.management

/** @param batchSize
  *   Inference batch size, default: 1.
  *  optional
  * @param handler
  *   Inference handler entry-point. This value will override handler in MANIFEST.json if present.
  *  optional
  * @param initialWorkers
  *   Number of initial workers, default: 0.
  *  optional
  * @param maxBatchDelay
  *   Maximum delay for batch aggregation, default: 100.
  *  optional
  * @param modelName
  *   Name of model. This value will override modelName in MANIFEST.json if present.
  *  optional
  * @param responseTimeout
  *   Maximum time, in seconds, the TorchServe waits for a response from the model inference code, default: 120.
  *  optional
  * @param runtime
  *   Runtime for the model custom service code. This value will override runtime in MANIFEST.json if present.
  *  optional
  * @param synchronous
  *   Decides whether creation of worker synchronous or not, default: false.
  *  optional
  * @param url
  *   Model archive download url, support local file or HTTP(s) protocol.
  *  required
  * @param s3SseKms
  *   Decides whether S3 SSE KMS enabled or not, default: false.
  *  optional
  * @param startupTimeout
  *   Maximum time, in seconds, the TorchServe waits for a model to startup, default: 120.
  *  optional
  */
@SerialVersionUID(0L)
final case class RegisterModelRequest(
    batchSize: _root_.scala.Int = 0,
    handler: _root_.scala.Predef.String = "",
    initialWorkers: _root_.scala.Int = 0,
    maxBatchDelay: _root_.scala.Int = 0,
    modelName: _root_.scala.Predef.String = "",
    responseTimeout: _root_.scala.Int = 0,
    runtime: _root_.scala.Predef.String = "",
    synchronous: _root_.scala.Boolean = false,
    url: _root_.scala.Predef.String = "",
    s3SseKms: _root_.scala.Boolean = false,
    startupTimeout: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RegisterModelRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = batchSize
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = handler
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = initialWorkers
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      
      {
        val __value = maxBatchDelay
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      
      {
        val __value = modelName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = responseTimeout
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, __value)
        }
      };
      
      {
        val __value = runtime
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = synchronous
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, __value)
        }
      };
      
      {
        val __value = url
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      
      {
        val __value = s3SseKms
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(10, __value)
        }
      };
      
      {
        val __value = startupTimeout
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(11, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = batchSize
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = handler
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = initialWorkers
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      {
        val __v = maxBatchDelay
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      {
        val __v = modelName
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = responseTimeout
        if (__v != 0) {
          _output__.writeInt32(6, __v)
        }
      };
      {
        val __v = runtime
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = synchronous
        if (__v != false) {
          _output__.writeBool(8, __v)
        }
      };
      {
        val __v = url
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      {
        val __v = s3SseKms
        if (__v != false) {
          _output__.writeBool(10, __v)
        }
      };
      {
        val __v = startupTimeout
        if (__v != 0) {
          _output__.writeInt32(11, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withBatchSize(__v: _root_.scala.Int): RegisterModelRequest = copy(batchSize = __v)
    def withHandler(__v: _root_.scala.Predef.String): RegisterModelRequest = copy(handler = __v)
    def withInitialWorkers(__v: _root_.scala.Int): RegisterModelRequest = copy(initialWorkers = __v)
    def withMaxBatchDelay(__v: _root_.scala.Int): RegisterModelRequest = copy(maxBatchDelay = __v)
    def withModelName(__v: _root_.scala.Predef.String): RegisterModelRequest = copy(modelName = __v)
    def withResponseTimeout(__v: _root_.scala.Int): RegisterModelRequest = copy(responseTimeout = __v)
    def withRuntime(__v: _root_.scala.Predef.String): RegisterModelRequest = copy(runtime = __v)
    def withSynchronous(__v: _root_.scala.Boolean): RegisterModelRequest = copy(synchronous = __v)
    def withUrl(__v: _root_.scala.Predef.String): RegisterModelRequest = copy(url = __v)
    def withS3SseKms(__v: _root_.scala.Boolean): RegisterModelRequest = copy(s3SseKms = __v)
    def withStartupTimeout(__v: _root_.scala.Int): RegisterModelRequest = copy(startupTimeout = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = batchSize
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = handler
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = initialWorkers
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = maxBatchDelay
          if (__t != 0) __t else null
        }
        case 5 => {
          val __t = modelName
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = responseTimeout
          if (__t != 0) __t else null
        }
        case 7 => {
          val __t = runtime
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = synchronous
          if (__t != false) __t else null
        }
        case 9 => {
          val __t = url
          if (__t != "") __t else null
        }
        case 10 => {
          val __t = s3SseKms
          if (__t != false) __t else null
        }
        case 11 => {
          val __t = startupTimeout
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(batchSize)
        case 2 => _root_.scalapb.descriptors.PString(handler)
        case 3 => _root_.scalapb.descriptors.PInt(initialWorkers)
        case 4 => _root_.scalapb.descriptors.PInt(maxBatchDelay)
        case 5 => _root_.scalapb.descriptors.PString(modelName)
        case 6 => _root_.scalapb.descriptors.PInt(responseTimeout)
        case 7 => _root_.scalapb.descriptors.PString(runtime)
        case 8 => _root_.scalapb.descriptors.PBoolean(synchronous)
        case 9 => _root_.scalapb.descriptors.PString(url)
        case 10 => _root_.scalapb.descriptors.PBoolean(s3SseKms)
        case 11 => _root_.scalapb.descriptors.PInt(startupTimeout)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: org.pytorch.serve.grpc.management.management.RegisterModelRequest.type = org.pytorch.serve.grpc.management.management.RegisterModelRequest
    // @@protoc_insertion_point(GeneratedMessage[org.pytorch.serve.grpc.management.RegisterModelRequest])
}

object RegisterModelRequest extends scalapb.GeneratedMessageCompanion[org.pytorch.serve.grpc.management.management.RegisterModelRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.pytorch.serve.grpc.management.management.RegisterModelRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.pytorch.serve.grpc.management.management.RegisterModelRequest = {
    var __batchSize: _root_.scala.Int = 0
    var __handler: _root_.scala.Predef.String = ""
    var __initialWorkers: _root_.scala.Int = 0
    var __maxBatchDelay: _root_.scala.Int = 0
    var __modelName: _root_.scala.Predef.String = ""
    var __responseTimeout: _root_.scala.Int = 0
    var __runtime: _root_.scala.Predef.String = ""
    var __synchronous: _root_.scala.Boolean = false
    var __url: _root_.scala.Predef.String = ""
    var __s3SseKms: _root_.scala.Boolean = false
    var __startupTimeout: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __batchSize = _input__.readInt32()
        case 18 =>
          __handler = _input__.readStringRequireUtf8()
        case 24 =>
          __initialWorkers = _input__.readInt32()
        case 32 =>
          __maxBatchDelay = _input__.readInt32()
        case 42 =>
          __modelName = _input__.readStringRequireUtf8()
        case 48 =>
          __responseTimeout = _input__.readInt32()
        case 58 =>
          __runtime = _input__.readStringRequireUtf8()
        case 64 =>
          __synchronous = _input__.readBool()
        case 74 =>
          __url = _input__.readStringRequireUtf8()
        case 80 =>
          __s3SseKms = _input__.readBool()
        case 88 =>
          __startupTimeout = _input__.readInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    org.pytorch.serve.grpc.management.management.RegisterModelRequest(
        batchSize = __batchSize,
        handler = __handler,
        initialWorkers = __initialWorkers,
        maxBatchDelay = __maxBatchDelay,
        modelName = __modelName,
        responseTimeout = __responseTimeout,
        runtime = __runtime,
        synchronous = __synchronous,
        url = __url,
        s3SseKms = __s3SseKms,
        startupTimeout = __startupTimeout,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.pytorch.serve.grpc.management.management.RegisterModelRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      org.pytorch.serve.grpc.management.management.RegisterModelRequest(
        batchSize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        handler = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        initialWorkers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        maxBatchDelay = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        modelName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        responseTimeout = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        runtime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        synchronous = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        url = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        s3SseKms = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        startupTimeout = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.pytorch.serve.grpc.management.management.ManagementProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.pytorch.serve.grpc.management.management.ManagementProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.pytorch.serve.grpc.management.management.RegisterModelRequest(
    batchSize = 0,
    handler = "",
    initialWorkers = 0,
    maxBatchDelay = 0,
    modelName = "",
    responseTimeout = 0,
    runtime = "",
    synchronous = false,
    url = "",
    s3SseKms = false,
    startupTimeout = 0
  )
  implicit class RegisterModelRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.pytorch.serve.grpc.management.management.RegisterModelRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.pytorch.serve.grpc.management.management.RegisterModelRequest](_l) {
    def batchSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.batchSize)((c_, f_) => c_.copy(batchSize = f_))
    def handler: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.handler)((c_, f_) => c_.copy(handler = f_))
    def initialWorkers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.initialWorkers)((c_, f_) => c_.copy(initialWorkers = f_))
    def maxBatchDelay: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.maxBatchDelay)((c_, f_) => c_.copy(maxBatchDelay = f_))
    def modelName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.modelName)((c_, f_) => c_.copy(modelName = f_))
    def responseTimeout: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.responseTimeout)((c_, f_) => c_.copy(responseTimeout = f_))
    def runtime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.runtime)((c_, f_) => c_.copy(runtime = f_))
    def synchronous: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.synchronous)((c_, f_) => c_.copy(synchronous = f_))
    def url: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.url)((c_, f_) => c_.copy(url = f_))
    def s3SseKms: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.s3SseKms)((c_, f_) => c_.copy(s3SseKms = f_))
    def startupTimeout: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.startupTimeout)((c_, f_) => c_.copy(startupTimeout = f_))
  }
  final val BATCH_SIZE_FIELD_NUMBER = 1
  final val HANDLER_FIELD_NUMBER = 2
  final val INITIAL_WORKERS_FIELD_NUMBER = 3
  final val MAX_BATCH_DELAY_FIELD_NUMBER = 4
  final val MODEL_NAME_FIELD_NUMBER = 5
  final val RESPONSE_TIMEOUT_FIELD_NUMBER = 6
  final val RUNTIME_FIELD_NUMBER = 7
  final val SYNCHRONOUS_FIELD_NUMBER = 8
  final val URL_FIELD_NUMBER = 9
  final val S3_SSE_KMS_FIELD_NUMBER = 10
  final val STARTUP_TIMEOUT_FIELD_NUMBER = 11
  def of(
    batchSize: _root_.scala.Int,
    handler: _root_.scala.Predef.String,
    initialWorkers: _root_.scala.Int,
    maxBatchDelay: _root_.scala.Int,
    modelName: _root_.scala.Predef.String,
    responseTimeout: _root_.scala.Int,
    runtime: _root_.scala.Predef.String,
    synchronous: _root_.scala.Boolean,
    url: _root_.scala.Predef.String,
    s3SseKms: _root_.scala.Boolean,
    startupTimeout: _root_.scala.Int
  ): _root_.org.pytorch.serve.grpc.management.management.RegisterModelRequest = _root_.org.pytorch.serve.grpc.management.management.RegisterModelRequest(
    batchSize,
    handler,
    initialWorkers,
    maxBatchDelay,
    modelName,
    responseTimeout,
    runtime,
    synchronous,
    url,
    s3SseKms,
    startupTimeout
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[org.pytorch.serve.grpc.management.RegisterModelRequest])
}

// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package org.pytorch.serve.grpc.openinference.open_inference_grpc

object OpenInferenceGrpcProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq.empty
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      org.pytorch.serve.grpc.openinference.open_inference_grpc.ServerLiveRequest,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.ServerLiveResponse,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.ServerReadyRequest,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.ServerReadyResponse,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.ModelReadyRequest,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.ModelReadyResponse,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.ServerMetadataRequest,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.ServerMetadataResponse,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.ModelMetadataRequest,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.ModelMetadataResponse,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.ModelInferRequest,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.ModelInferResponse,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.InferParameter,
      org.pytorch.serve.grpc.openinference.open_inference_grpc.InferTensorContents
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChlvcGVuX2luZmVyZW5jZV9ncnBjLnByb3RvEiRvcmcucHl0b3JjaC5zZXJ2ZS5ncnBjLm9wZW5pbmZlcmVuY2UiEwoRU2Vyd
  mVyTGl2ZVJlcXVlc3QiMwoSU2VydmVyTGl2ZVJlc3BvbnNlEh0KBGxpdmUYASABKAhCCeI/BhIEbGl2ZVIEbGl2ZSIUChJTZXJ2Z
  XJSZWFkeVJlcXVlc3QiNwoTU2VydmVyUmVhZHlSZXNwb25zZRIgCgVyZWFkeRgBIAEoCEIK4j8HEgVyZWFkeVIFcmVhZHkiWgoRT
  W9kZWxSZWFkeVJlcXVlc3QSHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEiYKB3ZlcnNpb24YAiABKAlCDOI/CRIHdmVyc
  2lvblIHdmVyc2lvbiI2ChJNb2RlbFJlYWR5UmVzcG9uc2USIAoFcmVhZHkYASABKAhCCuI/BxIFcmVhZHlSBXJlYWR5IhcKFVNlc
  nZlck1ldGFkYXRhUmVxdWVzdCKQAQoWU2VydmVyTWV0YWRhdGFSZXNwb25zZRIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hb
  WUSJgoHdmVyc2lvbhgCIAEoCUIM4j8JEgd2ZXJzaW9uUgd2ZXJzaW9uEi8KCmV4dGVuc2lvbnMYAyADKAlCD+I/DBIKZXh0ZW5za
  W9uc1IKZXh0ZW5zaW9ucyJdChRNb2RlbE1ldGFkYXRhUmVxdWVzdBIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSJgoHd
  mVyc2lvbhgCIAEoCUIM4j8JEgd2ZXJzaW9uUgd2ZXJzaW9uIu8DChVNb2RlbE1ldGFkYXRhUmVzcG9uc2USHQoEbmFtZRgBIAEoC
  UIJ4j8GEgRuYW1lUgRuYW1lEikKCHZlcnNpb25zGAIgAygJQg3iPwoSCHZlcnNpb25zUgh2ZXJzaW9ucxIpCghwbGF0Zm9ybRgDI
  AEoCUIN4j8KEghwbGF0Zm9ybVIIcGxhdGZvcm0SbwoGaW5wdXRzGAQgAygLMkoub3JnLnB5dG9yY2guc2VydmUuZ3JwYy5vcGVua
  W5mZXJlbmNlLk1vZGVsTWV0YWRhdGFSZXNwb25zZS5UZW5zb3JNZXRhZGF0YUIL4j8IEgZpbnB1dHNSBmlucHV0cxJyCgdvdXRwd
  XRzGAUgAygLMkoub3JnLnB5dG9yY2guc2VydmUuZ3JwYy5vcGVuaW5mZXJlbmNlLk1vZGVsTWV0YWRhdGFSZXNwb25zZS5UZW5zb
  3JNZXRhZGF0YUIM4j8JEgdvdXRwdXRzUgdvdXRwdXRzGnwKDlRlbnNvck1ldGFkYXRhEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZ
  VIEbmFtZRIpCghkYXRhdHlwZRgCIAEoCUIN4j8KEghkYXRhdHlwZVIIZGF0YXR5cGUSIAoFc2hhcGUYAyADKANCCuI/BxIFc2hhc
  GVSBXNoYXBlIqgMChFNb2RlbEluZmVyUmVxdWVzdBItCgptb2RlbF9uYW1lGAEgASgJQg7iPwsSCW1vZGVsTmFtZVIJbW9kZWxOY
  W1lEjYKDW1vZGVsX3ZlcnNpb24YAiABKAlCEeI/DhIMbW9kZWxWZXJzaW9uUgxtb2RlbFZlcnNpb24SFwoCaWQYAyABKAlCB+I/B
  BICaWRSAmlkEngKCnBhcmFtZXRlcnMYBCADKAsyRy5vcmcucHl0b3JjaC5zZXJ2ZS5ncnBjLm9wZW5pbmZlcmVuY2UuTW9kZWxJb
  mZlclJlcXVlc3QuUGFyYW1ldGVyc0VudHJ5Qg/iPwwSCnBhcmFtZXRlcnNSCnBhcmFtZXRlcnMSbQoGaW5wdXRzGAUgAygLMkgub
  3JnLnB5dG9yY2guc2VydmUuZ3JwYy5vcGVuaW5mZXJlbmNlLk1vZGVsSW5mZXJSZXF1ZXN0LkluZmVySW5wdXRUZW5zb3JCC+I/C
  BIGaW5wdXRzUgZpbnB1dHMSegoHb3V0cHV0cxgGIAMoCzJSLm9yZy5weXRvcmNoLnNlcnZlLmdycGMub3BlbmluZmVyZW5jZS5Nb
  2RlbEluZmVyUmVxdWVzdC5JbmZlclJlcXVlc3RlZE91dHB1dFRlbnNvckIM4j8JEgdvdXRwdXRzUgdvdXRwdXRzEkMKEnJhd19pb
  nB1dF9jb250ZW50cxgHIAMoDEIV4j8SEhByYXdJbnB1dENvbnRlbnRzUhByYXdJbnB1dENvbnRlbnRzGvwDChBJbmZlcklucHV0V
  GVuc29yEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRIpCghkYXRhdHlwZRgCIAEoCUIN4j8KEghkYXRhdHlwZVIIZGF0Y
  XR5cGUSIAoFc2hhcGUYAyADKANCCuI/BxIFc2hhcGVSBXNoYXBlEokBCgpwYXJhbWV0ZXJzGAQgAygLMlgub3JnLnB5dG9yY2guc
  2VydmUuZ3JwYy5vcGVuaW5mZXJlbmNlLk1vZGVsSW5mZXJSZXF1ZXN0LkluZmVySW5wdXRUZW5zb3IuUGFyYW1ldGVyc0VudHJ5Q
  g/iPwwSCnBhcmFtZXRlcnNSCnBhcmFtZXRlcnMSZAoIY29udGVudHMYBSABKAsyOS5vcmcucHl0b3JjaC5zZXJ2ZS5ncnBjLm9wZ
  W5pbmZlcmVuY2UuSW5mZXJUZW5zb3JDb250ZW50c0IN4j8KEghjb250ZW50c1IIY29udGVudHMaiQEKD1BhcmFtZXRlcnNFbnRye
  RIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSVgoFdmFsdWUYAiABKAsyNC5vcmcucHl0b3JjaC5zZXJ2ZS5ncnBjLm9wZW5pb
  mZlcmVuY2UuSW5mZXJQYXJhbWV0ZXJCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ARrdAgoaSW5mZXJSZXF1ZXN0ZWRPdXRwdXRUZW5zb
  3ISHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEpMBCgpwYXJhbWV0ZXJzGAIgAygLMmIub3JnLnB5dG9yY2guc2VydmUuZ
  3JwYy5vcGVuaW5mZXJlbmNlLk1vZGVsSW5mZXJSZXF1ZXN0LkluZmVyUmVxdWVzdGVkT3V0cHV0VGVuc29yLlBhcmFtZXRlcnNFb
  nRyeUIP4j8MEgpwYXJhbWV0ZXJzUgpwYXJhbWV0ZXJzGokBCg9QYXJhbWV0ZXJzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tle
  VIDa2V5ElYKBXZhbHVlGAIgASgLMjQub3JnLnB5dG9yY2guc2VydmUuZ3JwYy5vcGVuaW5mZXJlbmNlLkluZmVyUGFyYW1ldGVyQ
  griPwcSBXZhbHVlUgV2YWx1ZToCOAEaiQEKD1BhcmFtZXRlcnNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSVgoFd
  mFsdWUYAiABKAsyNC5vcmcucHl0b3JjaC5zZXJ2ZS5ncnBjLm9wZW5pbmZlcmVuY2UuSW5mZXJQYXJhbWV0ZXJCCuI/BxIFdmFsd
  WVSBXZhbHVlOgI4ASLZCAoSTW9kZWxJbmZlclJlc3BvbnNlEi0KCm1vZGVsX25hbWUYASABKAlCDuI/CxIJbW9kZWxOYW1lUgltb
  2RlbE5hbWUSNgoNbW9kZWxfdmVyc2lvbhgCIAEoCUIR4j8OEgxtb2RlbFZlcnNpb25SDG1vZGVsVmVyc2lvbhIXCgJpZBgDIAEoC
  UIH4j8EEgJpZFICaWQSeQoKcGFyYW1ldGVycxgEIAMoCzJILm9yZy5weXRvcmNoLnNlcnZlLmdycGMub3BlbmluZmVyZW5jZS5Nb
  2RlbEluZmVyUmVzcG9uc2UuUGFyYW1ldGVyc0VudHJ5Qg/iPwwSCnBhcmFtZXRlcnNSCnBhcmFtZXRlcnMScgoHb3V0cHV0cxgFI
  AMoCzJKLm9yZy5weXRvcmNoLnNlcnZlLmdycGMub3BlbmluZmVyZW5jZS5Nb2RlbEluZmVyUmVzcG9uc2UuSW5mZXJPdXRwdXRUZ
  W5zb3JCDOI/CRIHb3V0cHV0c1IHb3V0cHV0cxJGChNyYXdfb3V0cHV0X2NvbnRlbnRzGAYgAygMQhbiPxMSEXJhd091dHB1dENvb
  nRlbnRzUhFyYXdPdXRwdXRDb250ZW50cxr/AwoRSW5mZXJPdXRwdXRUZW5zb3ISHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuY
  W1lEikKCGRhdGF0eXBlGAIgASgJQg3iPwoSCGRhdGF0eXBlUghkYXRhdHlwZRIgCgVzaGFwZRgDIAMoA0IK4j8HEgVzaGFwZVIFc
  2hhcGUSiwEKCnBhcmFtZXRlcnMYBCADKAsyWi5vcmcucHl0b3JjaC5zZXJ2ZS5ncnBjLm9wZW5pbmZlcmVuY2UuTW9kZWxJbmZlc
  lJlc3BvbnNlLkluZmVyT3V0cHV0VGVuc29yLlBhcmFtZXRlcnNFbnRyeUIP4j8MEgpwYXJhbWV0ZXJzUgpwYXJhbWV0ZXJzEmQKC
  GNvbnRlbnRzGAUgASgLMjkub3JnLnB5dG9yY2guc2VydmUuZ3JwYy5vcGVuaW5mZXJlbmNlLkluZmVyVGVuc29yQ29udGVudHNCD
  eI/ChIIY29udGVudHNSCGNvbnRlbnRzGokBCg9QYXJhbWV0ZXJzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5ElYKB
  XZhbHVlGAIgASgLMjQub3JnLnB5dG9yY2guc2VydmUuZ3JwYy5vcGVuaW5mZXJlbmNlLkluZmVyUGFyYW1ldGVyQgriPwcSBXZhb
  HVlUgV2YWx1ZToCOAEaiQEKD1BhcmFtZXRlcnNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSVgoFdmFsdWUYAiABK
  AsyNC5vcmcucHl0b3JjaC5zZXJ2ZS5ncnBjLm9wZW5pbmZlcmVuY2UuSW5mZXJQYXJhbWV0ZXJCCuI/BxIFdmFsdWVSBXZhbHVlO
  gI4ASLAAQoOSW5mZXJQYXJhbWV0ZXISLwoKYm9vbF9wYXJhbRgBIAEoCEIO4j8LEglib29sUGFyYW1IAFIJYm9vbFBhcmFtEjIKC
  2ludDY0X3BhcmFtGAIgASgDQg/iPwwSCmludDY0UGFyYW1IAFIKaW50NjRQYXJhbRI1CgxzdHJpbmdfcGFyYW0YAyABKAlCEOI/D
  RILc3RyaW5nUGFyYW1IAFILc3RyaW5nUGFyYW1CEgoQcGFyYW1ldGVyX2Nob2ljZSLeAwoTSW5mZXJUZW5zb3JDb250ZW50cxI2C
  g1ib29sX2NvbnRlbnRzGAEgAygIQhHiPw4SDGJvb2xDb250ZW50c1IMYm9vbENvbnRlbnRzEjMKDGludF9jb250ZW50cxgCIAMoB
  UIQ4j8NEgtpbnRDb250ZW50c1ILaW50Q29udGVudHMSOQoOaW50NjRfY29udGVudHMYAyADKANCEuI/DxINaW50NjRDb250ZW50c
  1INaW50NjRDb250ZW50cxI2Cg11aW50X2NvbnRlbnRzGAQgAygNQhHiPw4SDHVpbnRDb250ZW50c1IMdWludENvbnRlbnRzEjwKD
  3VpbnQ2NF9jb250ZW50cxgFIAMoBEIT4j8QEg51aW50NjRDb250ZW50c1IOdWludDY0Q29udGVudHMSNgoNZnAzMl9jb250ZW50c
  xgGIAMoAkIR4j8OEgxmcDMyQ29udGVudHNSDGZwMzJDb250ZW50cxI2Cg1mcDY0X2NvbnRlbnRzGAcgAygBQhHiPw4SDGZwNjRDb
  250ZW50c1IMZnA2NENvbnRlbnRzEjkKDmJ5dGVzX2NvbnRlbnRzGAggAygMQhLiPw8SDWJ5dGVzQ29udGVudHNSDWJ5dGVzQ29ud
  GVudHMyxgYKFEdSUENJbmZlcmVuY2VTZXJ2aWNlEoEBCgpTZXJ2ZXJMaXZlEjcub3JnLnB5dG9yY2guc2VydmUuZ3JwYy5vcGVua
  W5mZXJlbmNlLlNlcnZlckxpdmVSZXF1ZXN0Gjgub3JnLnB5dG9yY2guc2VydmUuZ3JwYy5vcGVuaW5mZXJlbmNlLlNlcnZlckxpd
  mVSZXNwb25zZSIAEoQBCgtTZXJ2ZXJSZWFkeRI4Lm9yZy5weXRvcmNoLnNlcnZlLmdycGMub3BlbmluZmVyZW5jZS5TZXJ2ZXJSZ
  WFkeVJlcXVlc3QaOS5vcmcucHl0b3JjaC5zZXJ2ZS5ncnBjLm9wZW5pbmZlcmVuY2UuU2VydmVyUmVhZHlSZXNwb25zZSIAEoEBC
  gpNb2RlbFJlYWR5Ejcub3JnLnB5dG9yY2guc2VydmUuZ3JwYy5vcGVuaW5mZXJlbmNlLk1vZGVsUmVhZHlSZXF1ZXN0Gjgub3JnL
  nB5dG9yY2guc2VydmUuZ3JwYy5vcGVuaW5mZXJlbmNlLk1vZGVsUmVhZHlSZXNwb25zZSIAEo0BCg5TZXJ2ZXJNZXRhZGF0YRI7L
  m9yZy5weXRvcmNoLnNlcnZlLmdycGMub3BlbmluZmVyZW5jZS5TZXJ2ZXJNZXRhZGF0YVJlcXVlc3QaPC5vcmcucHl0b3JjaC5zZ
  XJ2ZS5ncnBjLm9wZW5pbmZlcmVuY2UuU2VydmVyTWV0YWRhdGFSZXNwb25zZSIAEooBCg1Nb2RlbE1ldGFkYXRhEjoub3JnLnB5d
  G9yY2guc2VydmUuZ3JwYy5vcGVuaW5mZXJlbmNlLk1vZGVsTWV0YWRhdGFSZXF1ZXN0Gjsub3JnLnB5dG9yY2guc2VydmUuZ3JwY
  y5vcGVuaW5mZXJlbmNlLk1vZGVsTWV0YWRhdGFSZXNwb25zZSIAEoEBCgpNb2RlbEluZmVyEjcub3JnLnB5dG9yY2guc2VydmUuZ
  3JwYy5vcGVuaW5mZXJlbmNlLk1vZGVsSW5mZXJSZXF1ZXN0Gjgub3JnLnB5dG9yY2guc2VydmUuZ3JwYy5vcGVuaW5mZXJlbmNlL
  k1vZGVsSW5mZXJSZXNwb25zZSIAYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}